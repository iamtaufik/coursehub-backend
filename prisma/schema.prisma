// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Levels {
  beginners
  intermediate
  advanced
}

model Admin {
  id        Int      @id @default(autoincrement())
  idAdmin   String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model users
model Users {
  id        Int       @id @default(autoincrement())
  nickname  String
  email     String    @unique
  password  String
  otp       String?
  courses   Courses[]
  profile   Profiles?
  userCourseProgress UserCourseProgress[]
  isVerified Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// model profiles
model Profiles {
  id              Int     @id @default(autoincrement())
  users_id        Int     @unique
  phone_number    String?
  first_name      String?
  last_name       String?
  profile_picture String?
  city            String?
  country         String?
  users           Users   @relation(fields: [users_id], references: [id])
}

// model Categories
model Categories {
  id              Int       @id @default(autoincrement())
  name_categories String
  courses         Courses[]
}

// model Courses
model Courses {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  image        String?
  requirements String[]
  level        Levels     @default(beginners)
  price        Int
  ratings      Int
  author       String
  userCourseProgress UserCourseProgress[]
  chapter_id   Int
  chapters     Chapters[]
  category_id  Int
  category     Categories @relation(fields: [category_id], references: [id])
  users_id     Int
  users        Users      @relation(fields: [users_id], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Chapters {
  id        Int       @id @default(autoincrement())
  name      String
  course_id Int
  courses   Courses   @relation(fields: [course_id], references: [id])
  modules   Modules[]
}

model Modules {
  id         Int      @id @default(autoincrement())
  title      String
  duration   Int
  url        String
  chapter_id Int
  chapters   Chapters @relation(fields: [chapter_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserCourseProgress {
  id           Int      @id @default(autoincrement())
  userId       Int
  courseId     Int
  completed    Boolean  @default(false)
  progress     Float    @default(0) // Misalkan menggunakan nilai 0-100 untuk progress
  lastAccessed DateTime @updatedAt
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user         Users    @relation(fields: [userId], references: [id])
  course       Courses  @relation(fields: [courseId], references: [id])
}
